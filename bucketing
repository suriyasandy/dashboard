import pandas as pd
import numpy as np

def create_threshold_bucket_summary(alerts_df, threshold_df):
    # Step 1: Merge threshold into alerts_df
    alerts_df = alerts_df.merge(threshold_df, left_on='Currency', right_on='CURR', how='left')

    all_summary = []

    # Step 2: Loop through each currency and apply dynamic buckets
    for curr in alerts_df['Currency'].unique():
        sub_df = alerts_df[alerts_df['Currency'] == curr]
        threshold = sub_df['Threshold'].iloc[0]  # Assuming consistent threshold per currency

        max_dev = sub_df['DeviationPercent'].max()
        bins = np.arange(0, max_dev + threshold, threshold)
        if len(bins) < 2:
            continue  # Skip if not enough to bin

        labels = [f"{round(bins[i], 2)}â€“{round(bins[i+1], 2)}" for i in range(len(bins)-1)]
        sub_df['Bucket'] = pd.cut(sub_df['DeviationPercent'], bins=bins, labels=labels, include_lowest=True)

        # Count how many fall in each bucket
        bucket_counts = sub_df['Bucket'].value_counts().rename_axis('Bucket').reset_index(name=curr)

        all_summary.append(bucket_counts)

    # Step 3: Combine all currency-specific bucket counts
    final_df = None
    for df in all_summary:
        if final_df is None:
            final_df = df
        else:
            final_df = pd.merge(final_df, df, on='Bucket', how='outer')

    final_df = final_df.fillna(0).set_index('Bucket').astype(int)
    return final_df.sort_index()
