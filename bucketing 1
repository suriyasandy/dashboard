import pandas as pd
import numpy as np

def generate_groupwise_threshold_summary(alerts_df, threshold_df):
    # Step 1: Get sorted unique group thresholds
    group_thresholds = (
        threshold_df[['GROUP', 'Threshold']]
        .drop_duplicates()
        .sort_values(by='Threshold')
        .reset_index(drop=True)
    )

    # Step 2: Define bins (last bin to infinity)
    bin_edges = [0.0] + list(group_thresholds['Threshold'].values)
    bin_edges[-1] = bin_edges[-1]  # retain last threshold
    bin_edges.append(np.inf)  # last bin ends in infinity

    # Labels like "0.0–0.4", "0.4–0.6", ..., "0.6–inf"
    bin_labels = [
        f"{round(bin_edges[i], 2)}–{'inf' if bin_edges[i+1] == np.inf else round(bin_edges[i+1], 2)}"
        for i in range(len(bin_edges)-1)
    ]

    # Step 3: Prepare alerts_df
    alerts_df = alerts_df.copy()
    alerts_df['Currency'] = alerts_df['ccypair'].str[:3]

    # Assign deviation into threshold bucket
    def get_alert_bucket(deviation):
        if pd.isnull(deviation):
            return np.nan
        return pd.cut(
            [deviation],
            bins=bin_edges,
            labels=bin_labels,
            include_lowest=True
        )[0]

    alerts_df['Threshold_Bucket'] = alerts_df['deviationpercent'].apply(get_alert_bucket)

    # Step 4: Pivot table (Bucket x Currency)
    summary = alerts_df.pivot_table(
        index='Threshold_Bucket',
        columns='Currency',
        values='trade_id',
        aggfunc='count',
        fill_value=0
    ).reset_index()

    # Step 5: Ensure all expected buckets exist
    all_ranges = pd.DataFrame({'Threshold_Bucket': bin_labels})
    summary = pd.merge(all_ranges, summary, on='Threshold_Bucket', how='left')
    summary = summary.fillna(0)

    # Step 6: Add TOTAL row
    total_row = summary.drop(columns=['Threshold_Bucket']).sum().to_frame().T
    total_row.insert(0, 'Threshold_Bucket', 'TOTAL')
    summary = pd.concat([summary, total_row], ignore_index=True)

    return summary
