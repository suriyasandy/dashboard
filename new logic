import pandas as pd
import numpy as np
import streamlit as st
from st_aggrid import AgGrid, GridOptionsBuilder, JsCode

def generate_groupwise_threshold_summary(alerts_df, threshold_df):
    """
    Create deviation bucket summary by currency using groupwise thresholds.
    Highlight rows where lower bound exceeds the max threshold.

    Parameters:
        alerts_df: must have 'ccypair' and 'deviationpercent'
        threshold_df: must have 'Threshold' column
    """

    # 1. Extract sorted unique threshold list
    thresholds = sorted(threshold_df['Threshold'].unique())
    if 0.0 not in thresholds:
        thresholds = [0.0] + thresholds
    thresholds = list(thresholds)

    # 2. Add final bin upper bound as np.inf
    bin_edges = thresholds + [np.inf]
    bin_labels = [
        f"{round(bin_edges[i], 2)}‚Äì{'inf' if bin_edges[i+1] == np.inf else round(bin_edges[i+1], 2)}"
        for i in range(len(bin_edges) - 1)
    ]

    # 3. Split Currencies
    alerts_df = alerts_df.copy()
    alerts_df['CCY1'] = alerts_df['ccypair'].str[:3]
    alerts_df['CCY2'] = alerts_df['ccypair'].str[3:6]

    # 4. Melt to have 1 currency per row
    melted = alerts_df.melt(
        id_vars=['deviationpercent'],
        value_vars=['CCY1', 'CCY2'],
        value_name='Currency'
    )

    # 5. Assign deviation buckets based on group thresholds
    melted['Deviation_Bucket'] = pd.cut(
        melted['deviationpercent'],
        bins=bin_edges,
        labels=bin_labels,
        include_lowest=True
    )

    # 6. Pivot table: rows=buckets, cols=currencies
    summary = melted.pivot_table(
        index='Deviation_Bucket',
        columns='Currency',
        values='deviationpercent',
        aggfunc='count',
        fill_value=0
    ).reset_index()

    # 7. Add total row
    total_row = summary.drop(columns='Deviation_Bucket').sum().to_frame().T
    total_row.insert(0, 'Deviation_Bucket', 'TOTAL')
    summary = pd.concat([summary, total_row], ignore_index=True)

    # 8. Extract lower bound from bin labels
    def extract_lower(x):
        try:
            return float(str(x).split('‚Äì')[0])
        except:
            return np.nan
    summary['Lower_Bound'] = summary['Deviation_Bucket'].apply(extract_lower)

    # 9. Drop all-zero currency columns (except index)
    non_total = summary[summary['Deviation_Bucket'] != 'TOTAL']
    non_zero_cols = non_total.drop(columns=['Deviation_Bucket', 'Lower_Bound']).any()
    keep_cols = ['Deviation_Bucket', 'Lower_Bound'] + list(non_zero_cols[non_zero_cols].index)
    summary = summary[keep_cols]

    # 10. JS for row-level highlighting
    max_threshold = threshold_df['Threshold'].max()

    def get_cell_style_js(thresh):
        return JsCode(f"""
            function(params) {{
                if (params.data.Lower_Bound > {thresh}) {{
                    return {{
                        'backgroundColor': '#ffe6e6',
                        'color': 'black'
                    }}
                }}
            }}
        """)

    # 11. Configure AgGrid
    st.subheader("üìä Groupwise Deviation Bucket Summary")

    gb = GridOptionsBuilder.from_dataframe(summary)
    for col in summary.columns:
        if col == "Lower_Bound":
            gb.configure_column(col, hide=True)
        else:
            gb.configure_column(col, cellStyle=get_cell_style_js(max_threshold), minWidth=100, autoWidth=True)

    grid_options = gb.build()

    st.markdown("""
    <style>
    .ag-theme-streamlit {
        overflow-x: auto !important;
        display: block;
        white-space: nowrap;
    }
    </style>
    """, unsafe_allow_html=True)

    AgGrid(
        summary.drop(columns=["Lower_Bound"]),
        gridOptions=grid_options,
        height=400,
        width='100%',
        fit_columns_on_grid_load=False,
        theme='streamlit',
        allow_unsafe_jscode=True
    )

    # 12. Download
    csv = summary.drop(columns=["Lower_Bound"]).to_csv(index=False).encode('utf-8')
    st.download_button(
        label="‚¨áÔ∏è Download Groupwise Bucket Summary",
        data=csv,
        file_name="groupwise_deviation_summary.csv",
        mime="text/csv"
    )
